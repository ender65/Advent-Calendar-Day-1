a = 0
b = 0
current_direction=0
distance = 0
previous_spot = [0,0]
location = [0,0]
pt_history = [[0,0]]
directions = 'L2, L3, L3, L4, R1, R2, L3, R3, R3, L1, L3, R2, R3, L3, R4, R3, R3, L1, L4, R4, L2, R5, R1, L5, R1, R3, L5, R2, L2, R2, R1, L1, L3, L3, R4, R5, R4, L1, L189, L2, R2, L5, R5, R45, L3, R4, R77, L1, R1, R194, R2, L5, L3, L2, L1, R5, L3, L3, L5, L5, L5, R2, L1, L2, L3, R2, R5, R4, L2, R3, R5, L2, L2, R3, L3, L2, L1, L3, R5, R4, R3, R2, L1, R2, L5, R4, L5, L4, R4, L2, R5, L3, L2, R4, L1, L2, R2, R3, L2, L5, R1, R1, R3, R4, R1, R2, R4, R5, L3, L5, L3, L3, R5, R4, R1, L3, R1, L3, R3, R3, R3, L1, R3, R4, L5, L3, L1, L5, L4, R4, R1, L4, R3, R3, R5, R4, R3, R3, L1, L2, R1, L4, L4, L3, L4, L3, L5, R2, R4, L2'

sep_directions = directions.split(', ')


while a<len(sep_directions):
    
    if sep_directions[a][0] == 'L':
        if current_direction == 0:
            current_direction = 3
        elif current_direction == 1:
            current_direction = 0
        elif current_direction == 2:
            current_direction = 1
        elif current_direction == 3:
            current_direction = 2
    else:
        if current_direction == 0:
            current_direction = 1
        elif current_direction == 1:
            current_direction =2
        elif current_direction == 2:
            current_direction = 3
        elif current_direction == 3:
            current_direction = 0

    distance = int(sep_directions[a][1:])

    if current_direction == 0:
        location[1]=location[1]+distance
    elif current_direction == 1:
        location[0]=location[0]+distance
    elif current_direction == 2:
        location[1]=location[1]-distance
    else:
        location[0] = location[0]-distance

    
    b = 0
    if location[0] == previous_spot[0]:
        if location[1] > previous_spot[1]:
            b=1
            while b < abs(max(location[1],previous_spot[1]) - min(location[1],previous_spot[1])):
                pt_history.append([previous_spot[0],previous_spot[1]+b])
                b=b+1
        
        else:
            while b < abs(max(location[1],previous_spot[1]) - min(location[1],previous_spot[1])):
                pt_history.append([previous_spot[0],location[1]+b])
                b=b+1
                
    else:
        if location[0]>previous_spot[0]:
            b=1
            while b < abs(max(location[0],previous_spot[0])- min(location[0],previous_spot[0]))+1:
                pt_history.append([previous_spot[0]+b,previous_spot[1]])
                b=b+1
        else:
            while b < abs(max(location[0],previous_spot[0])- min(location[0],previous_spot[0])):
                pt_history.append([location[0]+b,previous_spot[1]])
                b=b+1
    
    dupes = [x for n, x in enumerate(pt_history) if x in pt_history[:n]]
    
    if len(dupes) == 1:
        print dupes
        break
    
    
    
    previous_spot = location[:]
    a=a+1
